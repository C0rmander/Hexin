
-- ===========================================================================================
-- Drag and Drop - Defold Tutorial
-- cursor.script
-- ===========================================================================================

-- init() is executed when the cursor game object is initialized
local rendercam = require "rendercam.rendercam"
function init(self)

	-- Enable this cursor GameObject to 'listen' to inputs (mouse & touch)
	msg.post(".", "acquire_input_focus")

	-- In order to set the position of a GameObject using a dynamic collision object
	-- (the cursor) -- you have to disable the collision object
	msg.post("#collisionobject", "disable")

	-- Set instance variables
	self.collision_id = nil     -- id of gameobject which the cursor collided with
	self.dragged_id = nil       -- id of gameobject currently being dragged
	self.dragged_pos = nil
	self.pressed = false
	self.colission = false
end

-- -------------------------------------------------------------------------------------------
-- final() is executed when the cursor game object is deleted (end-of-game)
function final(self)
	msg.post(".", "release_input_focus")
end

-- -------------------------------------------------------------------------------------------
-- update() is called once each frame; 'dt' is the time difference since the last frame
function update(self, dt)
	-- Set the render clear color--aka, screen color when nothing is rendered
	msg.post("@render:", "clear_color",
	{ color = vmath.vector4(95 /256, 129 / 256, 161 / 256, 1 ) })
	self.collision_id = nil
end

-- -------------------------------------------------------------------------------------------
-- on_message() responds to Defold messages which are received by this game object
function on_message(self, message_id, message, sender)
	-- Upon a collision message; set self.collision_id to the id of top-most sprite
	-- pointed to by the cursor object
	if message_id == hash("collision_response") then
		if not self.collision_id then
			self.collision = true
			self.collision_id = message.other_id
		end
	end
end

-- -------------------------------------------------------------------------------------------
-- on_input() receives input actions dispatched from the Defold Game Engine
function on_input(self, action_id, action)
	if not action_id or action_id == hash("touch") then

		-- Update the Defold cursor position to the current position of the machine cursor
		
		local mouse_world_pos = rendercam.screen_to_world_2d(action.screen_x, action.screen_y)
		local action_pos = vmath.vector3(mouse_world_pos.x, mouse_world_pos.y, 0)
		go.set_position(action_pos)

		-- Revise instance status variables; click/touch -- released
		if action.pressed then
			msg.post("#collisionobject", "enable")
			self.pressed = true
			print(self.collision_id)
			local hexID = msg.url(nil, self.collision_id, "HexScript")
			print(go.get(hexID, "house"))
		else
			msg.post("#collisionobject", "disable")
		end
	end
end